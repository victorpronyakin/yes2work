<?php

namespace AppBundle\Repository;

/**
 * ApplicantsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicantsRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $id
     * @param $status
     * @param array $params
     * @return mixed
     */
    public function getApplicantsByClientWithStatus($id, $status, $params=array()){
        $query = $this->createQueryBuilder('a')
            ->from("AppBundle:User", "u")
            ->from("AppBundle:ProfileDetails", "pd")
            ->select('IDENTITY(a.candidate) as candidateID, IDENTITY(a.job) as jobID, u.firstName, u.lastName, pd.mostRole as role, pd.mostEmployer as employer, pd.availability, pd.picture, pd.video, pd.copyOfID, a.created')
            ->where("a.candidate = u.id")
            ->andWhere("u.id = pd.user")
            ->andWhere("a.client = :id")
            ->setParameter('id', $id)
            ->andWhere("a.status = :status")
            ->setParameter("status", $status);

        if(isset($params['jobID']) && !empty($params['jobID']) && intval($params['jobID'])>0){
            $query->andWhere('a.job = :job')
                ->setParameter("job", intval($params['jobID']));
        }

        if(isset($params['search']) && !empty($params['search'])){
            $search = explode(" ", $params['search']);
            if(count($search) > 1){
                $query->andWhere('(u.firstName LIKE :search1) AND (u.lastName LIKE :search2)')
                    ->setParameter('search1', '%'.$search[0].'%')
                    ->setParameter('search2', '%'.$search[1].'%');
            }
            else{
                $query->andWhere('(u.firstName LIKE :search) OR (u.lastName LIKE :search)')
                    ->setParameter('search', '%'.$params['search'].'%');
            }
        }

        if(isset($params['gender']) && $params['gender'] != 'All' && ($params['gender'] == 'Male' || $params['gender'] == 'Female')){
            $query->andWhere('pd.gender = :gender')
                ->setParameter('gender',$params['gender']);
        }

        if(isset($params['ethnicity']) && $params['ethnicity'] != 'null' && $params['ethnicity'] != NULL && !empty($params['ethnicity']) && $params['ethnicity']!="All"){
            $query->andWhere('pd.ethnicity = :ethnicity')
                ->setParameter('ethnicity', $params['ethnicity']);
        }

        if(isset($params['nationality']) && $params['nationality'] != 'null' && $params['nationality'] != NULL && $params['nationality'] >0){
            $query->andWhere('pd.nationality = :nationality')
                ->setParameter('nationality', $params['nationality']);
        }

        if(isset($params['location']) && $params['location'] != 'null' && $params['location'] != NULL && !empty($params['location']) && $params['location'] != 'All'){
            $query->andWhere('pd.citiesWorking LIKE :location')
                ->setParameter('location', '%'.$params['location'].'%');
        }

        if(isset($params['availability']) && $params['availability'] != 'null' && $params['availability'] != NULL && $params['availability']>0 && $params['availability']<4){
            if($params['availability'] == 1){
                $now = new \DateTime();
                $query->andWhere("(pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= :now))")
                    ->setParameter('now', $now->format('Y-m-d'));
            }
            elseif ($params['availability'] == 2){
                $now = new \DateTime('+1 month');
                $query->andWhere("(pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= :now) OR pd.availabilityPeriod = 1)")
                    ->setParameter('now', $now->format('Y-m-d'));
            }
            else{
                $now = new \DateTime('+3month');
                $query->andWhere("((pd.availability = true) OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= :now) OR (pd.availabilityPeriod = 1 OR pd.availabilityPeriod = 2 OR pd.availabilityPeriod = 3))")
                    ->setParameter('now', $now->format('Y-m-d'));
            }
        }


        $query->orderBy('a.created','ASC');

        return $query->getQuery()->getResult();
    }

    /**
     * @param $id
     * @param $status
     * @param array $params
     * @return mixed
     */
    public function getApplicantsByClientWithStatusNew($id, $status, $params=array()){
    	$additional_from = [];
        $query = $this->createQueryBuilder('a')
            ->from("AppBundle:User", "u")
            ->from("AppBundle:ProfileDetails", "pd")
            ->select('IDENTITY(a.candidate) as candidateID, IDENTITY(a.job) as jobID, u.firstName, u.lastName, pd.mostRole as role, pd.mostEmployer as employer, 
            pd.availability, pd.availabilityPeriod, pd.dateAvailability, pd.firstJob, pd.picture, pd.video, pd.mostSalary, pd.salaryPeriod, pd.salaryPeriod, pd.specialization as field, pd.ethnicity, pd.copyOfID, a.created')
			->where("a.candidate = u.id")
            ->andWhere("u.id = pd.user")
            ->andWhere("a.client = :id")
            ->setParameter('id', $id)
            ->andWhere("a.status = :status")
            ->setParameter("status", $status);


        if(isset($params['jobID']) && !empty($params['jobID']) && intval($params['jobID'])>0){
            $query->andWhere('a.job = :job')
                ->setParameter("job", intval($params['jobID']));
        }

        if(isset($params['search']) && !empty($params['search'])){
            $search = explode(" ", $params['search']);
            if(count($search) > 1){
                $query->andWhere('(u.firstName LIKE :search1) AND (u.lastName LIKE :search2)')
                    ->setParameter('search1', '%'.$search[0].'%')
                    ->setParameter('search2', '%'.$search[1].'%');
            }
            else{
                $query->andWhere('(u.firstName LIKE :search) OR (u.lastName LIKE :search)')
                    ->setParameter('search', '%'.$params['search'].'%');
            }
        }


        if(isset($params['gender']) && $params['gender'] != 'null' && $params['gender'] != NULL){
            if(is_array($params['gender'])){
                $genders = $params['gender'];
            }
            else{
                $genders = explode(',',$params['gender']);
            }
            if(!empty($genders) && !in_array('All', $genders) ){
                $str = '(';
                foreach ($genders as $key=>$gender){
                    if($key>0){
                        $str .= " OR pd.gender='$gender'";
                    }
                    else{
                        $str .= "pd.gender='$gender'";
                    }
                }
                $str .= ')';
                $query->andWhere($str);
            }
        }

        if(isset($params['ethnicity']) && $params['ethnicity'] != 'null' && $params['ethnicity'] != NULL){
            if(is_array($params['ethnicity'])){
                $ethnicitys = $params['ethnicity'];
            }
            else{
                $ethnicitys = explode(',',$params['ethnicity']);
            }
            if(!empty($ethnicitys) && !in_array('All', $ethnicitys) ){
                $str = '(';
                foreach ($ethnicitys as $key=>$ethnicity){
                    if($key>0){
                        $str .= " OR pd.ethnicity='$ethnicity'";
                    }
                    else{
                        $str .= "pd.ethnicity='$ethnicity'";
                    }
                }
                $str .= ')';
                $query->andWhere($str);
            }
        }

        if(isset($params['nationality']) && $params['nationality'] != 'null' && $params['nationality'] != NULL){
            if(is_array($params['nationality'])){
                $nationalitys = $params['nationality'];
            }
            else{
                $nationalitys = explode(',',$params['nationality']);
            }
            if(!empty($nationalitys) && !in_array('All', $nationalitys) ){
                $str = '(';
                foreach ($nationalitys as $key=>$nationality){
                    if($key>0){
                        $str .= " OR pd.nationality='$nationality'";
                    }
                    else{
                        $str .= "pd.nationality='$nationality'";
                    }
                }
                $str .= ')';
                $query->andWhere($str);
            }
        }

        if(isset($params['location']) && $params['location'] != 'null' && $params['location'] != NULL){
            if(is_array($params['location'])){
                $locations = $params['location'];
            }
            else{
                $locations = explode(',',$params['location']);
            }
            if(!empty($locations) && !in_array('All', $locations) ){
                $str = '(';
                foreach ($locations as $key=>$location){
                    $location = "%".$location."%";
                    if($key>0){
                        $str .= " OR pd.citiesWorking LIKE '$location'";
                    }
                    else{
                        $str .= "pd.citiesWorking LIKE '$location'";
                    }
                }
                $str .= ')';
                $query->andWhere($str);
            }
        }

        if(isset($params['availability']) && $params['availability'] != 'null' && $params['availability'] != NULL){
            if(is_array($params['availability'])){
                $availabilitys = $params['availability'];
            }
            else{
                $availabilitys = explode(',',$params['availability']);
            }
            if(!empty($availabilitys) && !in_array('All', $availabilitys) ){
                $str = '(';
                foreach ($availabilitys as $key=>$availability){
                    if($availability == 1){
                        $nowD = new \DateTime();
                        $now = $nowD->format('Y-m-d');
                        if($key>0){
                            $str .= " OR (pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= '$now'))";
                        }
                        else{
                            $str .= "(pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= '$now'))";
                        }
                    }
                    elseif ($availability == 2){
                        $nowD = new \DateTime('+1 month');
                        $now = $nowD->format('Y-m-d');
                        if($key>0){
                            $str .= " OR (pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= '$now') OR pd.availabilityPeriod = 1)";
                        }
                        else{
                            $str .= "(pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= '$now') OR pd.availabilityPeriod = 1)";
                        }
                    }
                    elseif ($availability == 3){
                        $nowD = new \DateTime('+3 month');
                        $now = $nowD->format('Y-m-d');
                        if($key>0){
                            $str .= " OR ((pd.availability = true) OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= '$now') OR (pd.availabilityPeriod = 1 OR pd.availabilityPeriod = 2 OR pd.availabilityPeriod = 3))";
                        }
                        else{
                            $str .= "((pd.availability = true) OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= '$now') OR (pd.availabilityPeriod = 1 OR pd.availabilityPeriod = 2 OR pd.availabilityPeriod = 3))";
                        }
                    }
                }
                $str .= ')';
                $query->andWhere($str);
            }

        }

		if(isset($params['video']) && $params['video'] === 'Yes'){
			$query->andWhere('pd.video IS NOT NULL')
				->andWhere('pd.video NOT LIKE :empty_array')
				->setParameter('empty_array', "%".serialize(array())."%")
				->andWhere('pd.video NOT LIKE :empty_null')
				->setParameter('empty_null', "%".serialize(NULL)."%");
		}else if(isset($params['video']) && $params['video'] === 'No'){
				$query->andWhere('pd.video LIKE :empty_null');
				$query->setParameter('empty_null', "%".serialize(NULL)."%");
		}

		if(isset($params['field']) && $params['field'] != 'null' && $params['field'] != NULL){
			if(is_array($params['field'])){
				$fields = $params['field'];
			}
			else{
				$fields = explode(',',$params['field']);
			}
			if(!empty($fields) && !in_array('All', $fields) ){
				$str = '(';
				foreach ($fields as $key=>$field){
					if($key>0){
						$str .= " OR (
									cq.specialization LIKE '{$field}' OR 
									cq.specializationCustom LIKE '{$field}' OR
									pd.specialization LIKE '%{$field}%' OR
									cr.specialization LIKE '%{$field}%'
									)";
					}
					else{
						$str .= " (
									cq.specialization LIKE '{$field}' OR 
									cq.specializationCustom LIKE '{$field}' OR
									pd.specialization LIKE '%{$field}%' OR
									cr.specialization LIKE '%{$field}%'
									)";
					}
				}
				$str .= ')';
				if(!in_array('AppBundle:CandidateQualifications',$additional_from)){
					$query->from("AppBundle:CandidateQualifications", "cq")->andWhere("a.candidate = cq.user");
					$additional_from[] = 'AppBundle:CandidateQualifications';
				}
				if(!in_array('AppBundle:CandidateReferences',$additional_from)){
					$query->from("AppBundle:CandidateReferences", "cr")->andWhere("a.candidate = cr.user");
					$additional_from[] = 'AppBundle:CandidateReferences';
				}
				$query->andWhere($str);
			}
		}

		if(isset($params['monthSalaryFrom']) && !is_null($params['monthSalaryFrom']) && $params['monthSalaryFrom'] != 'null'){
            $additional_where = '';
            if(!isset($params['monthSalaryFrom']) || empty($params['monthSalaryFrom']) || $params['monthSalaryFrom'] != 'null'){
                $additional_where = 'OR pd.firstJob = 1';
            }

            $month_salary = $params['monthSalaryFrom'];
            $annual_salary = (int)$params['monthSalaryFrom'] * 12;
            $query->andWhere("(
					(pd.mostSalary >= :month_salary_from AND pd.salaryPeriod = 'monthly') OR
					(pd.mostSalary >= :annual_salary_from AND pd.salaryPeriod = 'annual') ".$additional_where."
				)");
            $query->setParameter('month_salary_from', $month_salary);
            $query->setParameter('annual_salary_from', $annual_salary);
		}
		if(isset($params['monthSalaryTo']) && !is_null($params['monthSalaryTo']) && $params['monthSalaryTo'] != 'null'){
			//2000
            if($params['monthSalaryTo'] != 35000){
                $additional_where = '';
                if(!isset($params['monthSalaryFrom']) || empty($params['monthSalaryFrom']) || $params['monthSalaryFrom'] != 'null'){
                    $additional_where = 'OR pd.firstJob = 1';
                }

                $month_salary = $params['monthSalaryTo'];
                $annual_salary = (int)$params['monthSalaryTo'] * 12;
                $query->andWhere("(
					(pd.mostSalary <= :month_salary_to AND pd.salaryPeriod = 'monthly') OR
					(pd.mostSalary <= :annual_salary_to AND pd.salaryPeriod = 'annual') ".$additional_where."
				)");
                $query->setParameter('month_salary_to', $month_salary);
                $query->setParameter('annual_salary_to', $annual_salary);
            }
		}

		/*if(isset($params['highestQualification']) && $params['highestQualification'] != 'null' && $params['highestQualification'] != NULL && $params['highestQualification'] != 'All'){
			if(is_array($params['highestQualification'])){
				$highestQualification = $params['highestQualification'];
			}
			else{
				$highestQualification = explode(',',$params['highestQualification']);
			}
			if(!empty($highestQualification) && !in_array('All', $highestQualification) ) {
                $str = '';
				if (in_array('NQF 4 - Matric', $highestQualification)) {
					$query->andWhere('cq.type = 1');
				} else {
					if (in_array('NQF 2 - Grade 10', $highestQualification)) {
						unset($highestQualification[array_search('NQF 2 - Grade 10', $highestQualification)]);
						$query->andWhere('cq.type = 2');
					}
					if (sizeof($highestQualification) > 0) {

						$str = '(';
						foreach ($highestQualification as $key => $qualif_lvl) {
							$qualif_lvl = "%" . $qualif_lvl . "%";
							if ($key > 0) {
								$str .= " OR cq.levelQ LIKE '$qualif_lvl'";
							} else {
								$str .= "cq.levelQ LIKE '$qualif_lvl'";
							}
						}
						$str .= ')';
						$query->andWhere($str);
					}

				}

				if (!in_array('AppBundle:CandidateQualifications', $additional_from)) {
					$query->from("AppBundle:CandidateQualifications", "cq")->andWhere("a.candidate = cq.user");
					$additional_from[] = 'AppBundle:CandidateQualifications';
				}
				$query->andWhere($str);
			}
		}*/

		if(isset($params['eligibility']) && $params['eligibility'] === 'applicable'){
			$query->andWhere("(pd.ethnicity != 'White' AND pd.ethnicity != 'Foreign National')");
		}

		$orderSort = 'ASC';
		$orderBy = 'a.created';
		$orderByKeys = [
			'candidateID'=>'candidateID',
			'jobID'=>'jobID',
			'firstName'=>'u.firstName',
			'lastName'=>'u.lastName',
			'role'=>'role',
			'employer'=>'employer',
			'availability'=>'pd.availability',
			'picture'=>'pd.picture',
			'video'=>'pd.video',
			'mostSalary'=>'pd.mostSalary',
			'salaryPeriod'=>'pd.salaryPeriod',
			'field'=>'pd.specialization',
			'created'=>'a.created'
		];
		if(isset($params['orderBy']) && $params['orderBy'] != 'null' && $params['orderBy'] != NULL && array_key_exists($params['orderBy'],$orderByKeys)){
			$orderBy = $orderByKeys[$params['orderBy']];

		}
		if(isset($params['orderSort']) && $params['orderSort'] != 'null' && $params['orderSort'] != NULL && array_key_exists($params['orderBy'],$orderByKeys)){
			$orderSort = $params['orderSort'];
		}

		$query->orderBy($orderBy, $orderSort);

        return $query->getQuery()->getResult();
    }

    /**
     * @param $id
     * @param $status
     * @param array $params
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCountApplicantsByClientWithStatus($id, $status, $params=array()){
        $query = $this->createQueryBuilder('a')
            ->from("AppBundle:User", "u")
            ->from("AppBundle:ProfileDetails", "pd")
            ->select('count(a) as countApplicants')
            ->where("a.candidate = u.id")
            ->andWhere("u.id = pd.user")
            ->andWhere("a.client = :id")
            ->setParameter('id', $id)
            ->andWhere("a.status = :status")
            ->setParameter("status", $status);

        if(isset($params['gender']) && $params['gender'] != 'All' && ($params['gender'] == 'Male' || $params['gender'] == 'Female')){
            $query->andWhere('pd.gender = :gender')
                ->setParameter('gender',$params['gender']);
        }

        if(isset($params['ethnicity']) && $params['ethnicity'] != 'null' && $params['ethnicity'] != NULL && !empty($params['ethnicity']) && $params['ethnicity']!="All"){
            $query->andWhere('pd.ethnicity = :ethnicity')
                ->setParameter('ethnicity', $params['ethnicity']);
        }

        if(isset($params['nationality']) && $params['nationality'] != 'null' && $params['nationality'] != NULL && $params['nationality'] >0){
            $query->andWhere('pd.nationality = :nationality')
                ->setParameter('nationality', $params['nationality']);
        }

        if(isset($params['location']) && $params['location'] != 'null' && $params['location'] != NULL && !empty($params['location']) && $params['location'] != 'All'){
            $query->andWhere('pd.citiesWorking LIKE :location')
                ->setParameter('location', '%'.$params['location'].'%');
        }

        if(isset($params['availability']) && $params['availability'] != 'null' && $params['availability'] != NULL && $params['availability']>0 && $params['availability']<4){
            if($params['availability'] == 1){
                $now = new \DateTime();
                $query->andWhere("(pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= :now))")
                    ->setParameter('now', $now->format('Y-m-d'));
            }
            elseif ($params['availability'] == 2){
                $now = new \DateTime('+1 month');
                $query->andWhere("(pd.availability = true OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= :now) OR pd.availabilityPeriod = 1)")
                    ->setParameter('now', $now->format('Y-m-d'));
            }
            else{
                $now = new \DateTime('+3month');
                $query->andWhere("((pd.availability = true) OR (pd.availability = false AND pd.availabilityPeriod = 4 AND DATE_FORMAT(pd.dateAvailability, '%Y-%m-%d') <= :now) OR (pd.availabilityPeriod = 1 OR pd.availabilityPeriod = 2 OR pd.availabilityPeriod = 3))")
                    ->setParameter('now', $now->format('Y-m-d'));
            }
        }

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $id
     * @param $status
     * @param array $params
     * @return mixed
     */
    public function getApplicantsByCandidateWithStatus($id, $status, $params=array()){
        $query = $this->createQueryBuilder('a')
            ->select('a')
            ->where("a.candidate = :id")
            ->setParameter('id', $id)
            ->andWhere("a.status = :status")
            ->setParameter("status", $status);

        if(isset($params['check']) && is_bool($params['check'])){
            $query->andWhere('a.check = :check')
                ->setParameter('check', $params['check']);
        }

        if(isset($params['startDate']) && !empty($params['startDate']) && $params['startDate'] != 'null'){
            $date = ($params['startDate'] instanceof \DateTime) ? $params['startDate'] : new \DateTime($params['startDate']);
            if($date instanceof \DateTime){
                $query->andWhere("DATE_FORMAT(a.created, '%Y-%m-%d') >= :startDate")
                    ->setParameter('startDate', $date->format('Y-m-d'));
            }
        }

        if(isset($params['endDate']) && !empty($params['endDate']) && $params['endDate'] != 'null'){
            $date = ($params['endDate'] instanceof \DateTime) ? $params['endDate'] : new \DateTime($params['endDate']);
            if($date instanceof \DateTime){
                $query->andWhere("DATE_FORMAT(a.created, '%Y-%m-%d') <= :endDate")
                    ->setParameter('endDate', $date->format('Y-m-d'));
            }
        }

        $query->orderBy('a.created','DESC');

        return $query->getQuery()->getResult();
    }

    /**
     * @param $status
     * @param array $params
     * @return mixed
     */
    public function getAllApplicants($status, $params=array()){
        $query = $this->createQueryBuilder('a')
            ->from('AppBundle:User', 'u')
            ->select('a')
            ->where("a.candidate = u.id");

        if(is_array($status)){
            $query
                ->andWhere("a.status IN (:status)");
        }
        else{
            $query
                ->andWhere("a.status = :status");
        }
        $query->setParameter("status", $status);


        if(isset($params['search']) && !empty($params['search'])){
            $search = explode(" ", $params['search']);
            if(count($search) > 1){
                $query->andWhere('(u.firstName LIKE :search1) AND (u.lastName LIKE :search2)')
                    ->setParameter('search1', '%'.$search[0].'%')
                    ->setParameter('search2', '%'.$search[1].'%');
            }
            else{
                $query->andWhere('(u.firstName LIKE :search) OR (u.lastName LIKE :search)')
                    ->setParameter('search', '%'.$params['search'].'%');
            }
        }

        $query->orderBy('a.created','DESC');

        return $query->getQuery()->getResult();
    }
}
