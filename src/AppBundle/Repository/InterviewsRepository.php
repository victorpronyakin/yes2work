<?php

namespace AppBundle\Repository;

/**
 * InterviewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterviewsRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $status
     * @param array $params
     * @return mixed
     */
    public function getAllInterviews($status, $params=array()){
        $query = $this->createQueryBuilder('i')
            ->from('AppBundle:User', 'u')
            ->select('i')
            ->where("i.candidate = u.id");

        if(is_array($status)){
            $query
                ->andWhere("i.status IN (:status)");
        }
        else{
            $query
                ->andWhere("i.status = :status");
        }
        $query->setParameter("status", $status);


        if(isset($params['search']) && !empty($params['search'])){
            $search = explode(" ", $params['search']);
            if(count($search) > 1){
                $query->andWhere('(u.firstName LIKE :search1) AND (u.lastName LIKE :search2)')
                    ->setParameter('search1', '%'.$search[0].'%')
                    ->setParameter('search2', '%'.$search[1].'%');
            }
            else{
                $query->andWhere('(u.firstName LIKE :search) OR (u.lastName LIKE :search)')
                    ->setParameter('search', '%'.$params['search'].'%');
            }
        }

        $query->orderBy('i.created','DESC');

        return $query->getQuery()->getResult();
    }

    /**
     * @param null $status
     * @return int
     */
    public function getCountAllInterviews($status=null){
        $query = $this->createQueryBuilder('i')
            ->select('COUNT(i.id) as countInterviews');
        if(!empty($status)){
            if(is_array($status)){
                $query->where("i.status IN (:status)")
                    ->setParameter('status', $status);
            }
            else{
                $query->where("i.status = :status")
                    ->setParameter('status', $status);
            }
        }

        $result = $query->getQuery()->getResult();

        return (isset($result[0]['countInterviews']) && intval($result[0]['countInterviews'])>0) ? intval($result[0]['countInterviews']) : 0;
    }

    /**
     * @param $candidateID
     * @param array $params
     * @return mixed
     */
    public function getInterviewsRequestForCandidate($candidateID, $params=array()){
        $query = $this->createQueryBuilder('i')
            ->select('i')
            ->where("i.candidate = :candidateID")
            ->setParameter('candidateID', $candidateID)
            ->andWhere('i.type = :type')
            ->setParameter('type', false)
            ->addOrderBy('i.created','DESC')
        ;

        if(isset($params['status']) && !empty($params['status']) && in_array($params['status'],[1,2])){
            $query->andWhere('i.status = :status')
                ->setParameter('status', $params['status']);
        }
        else{
            $query->andWhere('i.status IN (1,2)');
        }

        if(isset($params['startDate']) && !empty($params['startDate']) && $params['startDate'] != 'null'){
            $date = ($params['startDate'] instanceof \DateTime) ? $params['startDate'] : new \DateTime($params['startDate']);
            if($date instanceof \DateTime){
                $query->andWhere("DATE_FORMAT(i.created, '%Y-%m-%d') >= :startDate")
                    ->setParameter('startDate', $date->format('Y-m-d'));
            }
        }

        if(isset($params['endDate']) && !empty($params['endDate']) && $params['endDate'] != 'null'){
            $date = ($params['endDate'] instanceof \DateTime) ? $params['endDate'] : new \DateTime($params['endDate']);
            if($date instanceof \DateTime){
                $query->andWhere("DATE_FORMAT(i.created, '%Y-%m-%d') <= :endDate")
                    ->setParameter('endDate', $date->format('Y-m-d'));
            }
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $candidateID
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     */
    public function getCountInterviewsRequestForCandidate($candidateID){
        $query = $this->createQueryBuilder('i')
            ->select('count(i.id) as interviewRequestCount')
            ->where("i.candidate = :candidateID")
            ->setParameter('candidateID', $candidateID)
            ->andWhere('i.status IN (1,2)')
            ->andWhere('i.type = :type')
            ->setParameter('type', false)
            ->orderBy('i.status','DESC')
            ->addOrderBy('i.created','DESC')
        ;

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $status
     * @param null $type
     * @param array $params
     * @return mixed
     */
    public function getInterviews($status, $type=null, $params=array()){
        $query = $this->createQueryBuilder('i')
            ->from('AppBundle:User', 'u')
            ->select('i')
            ->where("i.candidate = u.id")
            ->andWhere("i.status = :status")
            ->setParameter('status', $status)
            ->orderBy('i.created','DESC');

        if(is_bool($type)){
            $query->andWhere('i.type = :type')
                ->setParameter('type', $type);
        }

        if(isset($params['search']) && !empty($params['search'])){
            $search = explode(" ", $params['search']);
            if(count($search) > 1){
                $query->andWhere('(u.firstName LIKE :search1) AND (u.lastName LIKE :search2)')
                    ->setParameter('search1', '%'.$search[0].'%')
                    ->setParameter('search2', '%'.$search[1].'%');
            }
            else{
                $query->andWhere('(u.firstName LIKE :search) OR (u.lastName LIKE :search)')
                    ->setParameter('search', '%'.$params['search'].'%');
            }
        }

        return $query->getQuery()->getResult();
    }
}
